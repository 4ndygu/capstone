# Generated by Django 2.0.2 on 2018-05-16 20:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('capdb', '0038_auto_20180510_1429'),
    ]

    operations = [
        migrations.AddField(
            model_name='casexml',
            name='size',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalcasexml',
            name='size',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalpagexml',
            name='size',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='historicalvolumexml',
            name='size',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='pagexml',
            name='size',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='volumemetadata',
            name='xml_checksums_need_update',
            field=models.BooleanField(default=False, help_text='Whether checksums in volume_xml match current values in related case_xml and page_xml data.'),
        ),
        migrations.AddField(
            model_name='volumexml',
            name='size',
            field=models.IntegerField(blank=True, null=True),
        ),
    ] + [
        # update the `size` column in our xml tables.
        # drop the `versioning_trigger` trigger during this update -- we don't need copies without size populated.
        # the versioning trigger will be recreated after migrations by `set_up_postgres`, which is called by `fab migrate`.
        migrations.RunSQL(
            """
                DROP TRIGGER IF EXISTS versioning_trigger ON {table};
                UPDATE {table} SET size=octet_length(text(orig_xml)) WHERE size IS null;
            """.format(table="capdb_"+model_name),
            migrations.RunSQL.noop
        )
        for model_name in ['volumexml', 'pagexml', 'casexml', 'volumexml_history', 'pagexml_history', 'casexml_history']
    ]
