# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-06-27 22:15
from __future__ import unicode_literals

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('capdb', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BookRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_by', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('recipients', models.CharField(blank=True, help_text='Email recipients', max_length=512, null=True)),
                ('from_field', models.CharField(blank=True, db_column='from', max_length=128, null=True)),
                ('mail_body', models.TextField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('send_date', models.DateField(blank=True, help_text='Future date on which to send the request', null=True)),
                ('sent_at', models.DateTimeField(blank=True, help_text='Date which it was actually sent', null=True)),
                ('label', models.CharField(blank=True, help_text='So the user can disambiguate between reqs', max_length=32, null=True)),
                ('subject', models.CharField(blank=True, help_text='Email subject', max_length=512, null=True)),
                ('delivery_date', models.DateField(blank=True, help_text='Requested date of delivery', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProcessStep',
            fields=[
                ('step', models.CharField(choices=[('Prec', 'received'), ('Pana', 'analyzed'), ('Ppre', 'prepped'), ('Pbat', 'batched'), ('Psca', 'scanned'), ('Pss1', 'stored, awaiting Meyer'), ('Phsc', 'returned to HSC'), ('Dqac', 'imaging QA completed'), ('Dred', 'redacted'), ('Ddep', 'deposited'), ('Ding', 'ingested'), ('Dqas', 'QA Skipped'), ('Preq', 'requested'), ('Psea', 'Vacuum Sealed'), ('Prqu', 'queued'), ('Pnrc', 'not received'), ('Dx2v', 'xfer to vendor'), ('Phrs', 'holding record suppresse'), ('Defv', 'recEvalFilesFromVencor'), ('Ppro', 'profiling'), ('Pprc', 'profiling complete'), ('Pcon', 'conserved'), ('Pwor', 'Packaged with Original'), ('Pcons', 'Conservation completed'), ('Dire', 'Innodata rework'), ('Ddup', 'Moved to Dup Bucket'), ('Pos', 'Out of Scope'), ('Pugv', 'Underground Vaults'), ('PdisLewis', 'Moved to Lewis'), ('Pmey', 'Meyer pickup'), ('Pacm', 'Sent to Acme'), ('Pres', 'Reshelved in Langdell'), ('Dclr', 'Cleared for Delivery'), ('Drcs', 'Received Shared'), ('Drcp', 'Received Private'), ('Pret', 'Returned to Lender')], help_text="The process step 'id'", max_length=255, primary_key=True, serialize=False, unique=True)),
                ('label', models.CharField(blank=True, help_text='Label to use in lists/log views', max_length=24, null=True)),
                ('prerequisites', models.CharField(blank=True, help_text='Other psteps which must be completed first', max_length=1024, null=True)),
                ('description', models.CharField(max_length=256)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Reporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jurisdiction', models.CharField(blank=True, max_length=64, null=True)),
                ('full_name', models.CharField(max_length=1024)),
                ('short_name', models.CharField(max_length=64)),
                ('start_year', models.IntegerField(blank=True, null=True)),
                ('end_year', models.IntegerField(blank=True, null=True)),
                ('volume_count', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('hollis', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=9), blank=True, help_text='This is going to replace the Hollis model', size=None)),
            ],
        ),
        migrations.CreateModel(
            name='TrackingToolLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_text', models.CharField(blank=True, help_text="Text log entry. Primarily used when pstep isn't set.", max_length=128)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('exception', models.BooleanField(help_text="Nothing to do with software exceptionsâ€“ more like a UPS delivery 'exception'")),
                ('warning', models.BooleanField(help_text="Something that's a bit off, but not necessarily indicative of a problem")),
                ('version_string', models.CharField(blank=True, help_text="'YYYY_DD_MM_hh.mm.ss' Appended to s3 dir to distinguish versions", max_length=32, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrackingToolUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('privilege_level', models.CharField(choices=[('0', '0'), ('1', '1'), ('5', '5'), ('10', '10'), ('15', '15')], help_text='The lower the value, the higher the privilege level.', max_length=3)),
                ('email', models.CharField(max_length=32)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='VolumeMetadata',
            fields=[
                ('barcode', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
                ('hollis_number', models.CharField(help_text='Identifier in the Harvard catalogging system, HOLLIS', max_length=9)),
                ('volume_number', models.CharField(blank=True, max_length=64, null=True)),
                ('publisher', models.CharField(blank=True, max_length=255, null=True)),
                ('publication_year', models.IntegerField(blank=True, null=True)),
                ('nominative_volume_number', models.CharField(blank=True, max_length=1024, null=True)),
                ('nominative_name', models.CharField(blank=True, max_length=1024, null=True)),
                ('series_volume_number', models.CharField(blank=True, max_length=1024, null=True)),
                ('spine_start_year', models.IntegerField(blank=True, null=True)),
                ('spine_end_year', models.IntegerField(blank=True, null=True)),
                ('start_year', models.IntegerField(blank=True, null=True)),
                ('end_year', models.IntegerField(blank=True, null=True)),
                ('page_start_year', models.IntegerField(blank=True, null=True)),
                ('page_end_year', models.IntegerField(blank=True, null=True)),
                ('contributing_library', models.CharField(blank=True, help_text="Several volumes didn't come from our collection", max_length=256, null=True)),
                ('rare', models.BooleanField()),
                ('hsc_review', models.CharField(blank=True, choices=[('No', 'No'), ('Complete', 'Complete'), ('Yes', 'Yes'), ('Reclassed', 'Reclassed')], help_text='Historical and Special Collections Review', max_length=9, null=True)),
                ('needs_repair', models.CharField(blank=True, choices=[('No', 'No'), ('Complete', 'Complete'), ('Yes', 'Yes')], max_length=9, null=True)),
                ('missing_text_pages', models.TextField(blank=True, help_text='Pages damaged enough to have lost text.', null=True)),
                ('bibliographic_review', models.CharField(blank=True, choices=[('No', 'No'), ('Complete', 'Complete'), ('Yes', 'Yes')], max_length=7, null=True)),
                ('analyst_page_count', models.IntegerField(blank=True, help_text='The page number of the last numbered page in the book', null=True)),
                ('duplicate', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('replaced_pages', models.CharField(blank=True, help_text='List of pages that were replaced', max_length=1024, null=True)),
                ('has_marginalia', models.BooleanField()),
                ('publication_city', models.CharField(blank=True, max_length=1024, null=True)),
                ('title', models.CharField(blank=True, max_length=1024, null=True)),
                ('hand_feed', models.BooleanField(help_text='Instructions for operator, not whether or not it happened')),
                ('image_count', models.IntegerField(blank=True, help_text='Count of images recieved from scanner', null=True)),
                ('publisher_deleted_pages', models.BooleanField()),
                ('notes', models.CharField(blank=True, max_length=512, null=True)),
                ('original_barcode', models.CharField(blank=True, max_length=64, null=True)),
                ('scope_reason', models.CharField(blank=True, choices=[('Damaged', 'Damaged'), ('Not Official', 'Not Official'), ('Duplicate', 'Duplicate'), ('No Cases', 'No Cases')], help_text='The reason something would be out_of_scope', max_length=16, null=True)),
                ('out_of_scope', models.BooleanField()),
                ('meyer_box_barcode', models.CharField(blank=True, help_text='The Meyer box barcode', max_length=32, null=True)),
                ('uv_box_barcode', models.CharField(blank=True, help_text='The Underground Vaults box barcode', max_length=32, null=True)),
                ('meyer_ky_truck', models.CharField(blank=True, help_text='The Meyer truck to Kentucky this book was shipped on', max_length=32, null=True)),
                ('meyer_pallet', models.CharField(blank=True, help_text='The pallet Meyer stored the book on', max_length=32, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='capdb.TrackingToolUser')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='capdb.Reporter')),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='capdb.BookRequest')),
            ],
            options={
                'verbose_name_plural': 'Volumes',
            },
        ),
        migrations.RenameModel(
            old_name='Case',
            new_name='CaseXML',
        ),
        migrations.RenameModel(
            old_name='Page',
            new_name='PageXML',
        ),
        migrations.RenameModel(
            old_name='Volume',
            new_name='VolumeXML',
        ),
        migrations.AddField(
            model_name='trackingtoollog',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='capdb.TrackingToolUser'),
        ),
        migrations.AddField(
            model_name='trackingtoollog',
            name='pstep',
            field=models.ForeignKey(blank=True, help_text='A significant event in production', null=True, on_delete=django.db.models.deletion.CASCADE, to='capdb.ProcessStep'),
        ),
        migrations.AddField(
            model_name='trackingtoollog',
            name='volume',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='capdb.VolumeMetadata'),
        ),
    ]
